[
{
	"uri": "http://localhost:1313/0-getting-set-up/",
	"title": "Getting Set Up",
	"tags": [],
	"description": "",
	"content": "Please do the following before our first workshop session on Monday Sept 23 at 10:00am\n1. Get R Download (or update to) the latest version of R (version 4.4.1) from https://cran.r-project.org/\nR is a software environment for computing, data analysis, and graphics. It\u0026rsquo;s like Python, but geared toward statistical work; like Stata, but better for programming; like Julia but people actually use it; like Matlab, but free.\nYou are welcome to open the minimal R app once downloaded. It\u0026rsquo;s extremely basic: a single-paned window with a \u0026ldquo;\u0026gt;\u0026rdquo; prompt. You type R commands at that prompt (e.g., 2+2 and hit enter). Using R this way works just fine, but it\u0026rsquo;s rather unfriendly.\n2. Get an IDE To improve your experience with R, you\u0026rsquo;ll want an integrated development environment (IDE), which is an application to help you write, test, and debug code.\nI highly recommend RStudio, particularly if you are new to statistical programming. However, VS Code is another excellent choice, and the folks at RStudio recently released Positron, a fork of VS Code with elements that make it particularly R-friendly.\nDownload the free desktop version of RStudio from\nhttps://posit.co/download/rstudio-desktop/\nAlternatively, download VS Code from\nhttps://code.visualstudio.com/download\nOr download Positron by following the \u0026ldquo;Install Postron\u0026rdquo; section of the ReadMe at\nhttps://github.com/posit-dev/positron\nRStudio and Positron are ready-to-go right away. Open your IDE and look for the Console (left side of RStudio, bottom of Positron) with a welcome message about R. At the prompt (\u0026quot;\u0026gt;\u0026quot;) type x = 2+2 and press return. You should see the object \u0026ldquo;x\u0026rdquo; appear in the Global Environment (top-right in RStudio, top-left in Positron). This is good. It means everything is working.\nWith VS Code, install the R Extension. Then open a new R script file (or a plain text document and save it with the .R extension, eg, filename \u0026ldquo;test.R\u0026rdquo;). Type an R command such as 2+2 and hit Cmd+Enter (Mac) or Ctrl+Enter (Windows). This will copy and execute the command in a Terminal pane running R at the bottom of the screen named \u0026ldquo;R Interactive\u0026rdquo;. In that R Interactive Terminal, type x = 2+2 and hit enter. Click on the R logo in the Activity Bar (default position is the left-side) to display the Workspace, under which you can see the Global Environment.\n3. Get LaTeX LaTeX is a markup language that enables us, among other things, to write fancy math and render things into PDF documents. You can download a minimal (but sufficient) amount of LaTeX by running the following two commands at the RStudio command prompt (\u0026quot;\u0026gt;\u0026quot;):\ninstall.packages(\u0026#39;tinytex\u0026#39;) inytex::install_tinytex() If you want the full-blown (2GB) LaTeX installation, go to https://www.Latex-project.org/get/ and scroll down to the links for the MacTex Distribution (for Mac users) and MikTex Distribution (for Windows users).\n4. Compile a Quarto document to PDF Create an empty text file. Copy the code below and save the file as a .qmd file (eg, filename \u0026ldquo;test.qmd\u0026rdquo;).\n--- title: \u0026#34;Title\u0026#34; format: pdf --- Here\u0026#39;s some text, and here\u0026#39;s some code: ```{r} 2 + 2 ``` Render the file, agreeing to install the \u0026ldquo;knitr\u0026rdquo; package if prompted.\nRStudio: Click the button with the blue arrow in the top center of the screen labeled \u0026ldquo;Render\u0026rdquo; Positron: Click the button on the top-right of the file labeled \u0026ldquo;Preview\u0026rdquo; VS Code: Install the Quarto extension. Then, like with Positron, click the button labeled \u0026ldquo;Preview\u0026rdquo; This does the following:\nThe knitr package in R executes the code and converts quarto (test.qmd) to markdown (test.md) Pandoc (a program bundled with RStudio and Position, and is installed with the Quarto extension in VS Code) converts the markdown file into a LaTeX file (test.tex) Your LaTeX engine (installed via TinyTex in step 3 above) renders the .tex file to a PDF file (test.pdf) Your PDF, once rendered, should automatically open for you to view in either a pane of your IDE or in a separate window with your system\u0026rsquo;s default PDF viewing application If you created the source .qmd document with R code and got it render to PDF, as below, then you\u0026rsquo;re all set!\nIf not, your IDE should report an error. Copy/paste the error into a web search or a LLM and troubleshoot. If that fails, we can fix it together.\nOne more thing I strongly recommend you pick up any book on R and just start reading. Recommendations can be found here.\n"
},
{
	"uri": "http://localhost:1313/1-r-objects/",
	"title": "R Fundamentals",
	"tags": [],
	"description": "",
	"content": "Submit Attendance: link\nFiles for today: example | vectors | matrices | lists | data.frames\nObject Types Variables Variables are named objects; objects result from the evaluation of an expresssion Names can be assigned with an equals sign (=) or the assignment operator (\u0026lt;-, alt+minus shortcut) For example, with x \u0026lt;- 2+2, the expression 2+2 evaluates to a length-one vector holding value 4, to which we have bound the name x Many ways to check the \u0026ldquo;type\u0026rdquo; of data in an R object My preferred method is to assess the structure of an object using str() Additional options include mode() / typeof() / class() among others You can check data types or convert between data types For example, using is.character() to check or as.character() to convert Special \u0026ldquo;values\u0026rdquo; in R include: TRUE and FALSE logical values (coerced to 0 and 1 when used in mathematical operations) NA indicates a placeholder for a missing value Inf and NaN result from, eg, dividing by zero NULL indicates a placeholder for a missing vector object It is helpful to think that everything in R is either an object or a function (and functions themselves are objects) The expression 2+2 is actually a call to the +() function, as in `+`(2,2) Vectors R automatically performs vector recycling when operating on multiple vectors of different lengths This makes a lot of sense when one of the vectors has length-one It can lead to nice \u0026ldquo;tricks\u0026rdquo; in very special circumstances However, in general for vectors longer than length-one, it is unusual behavior Vector can be subset using square brackets [] by: Position number, or a vector of position numbers \u0026ndash; no zero-based indexing like Python or C++ Logical vectors, often of the same length as the vector to be subset Element names, if the elements of the vector are named Logical tests are extremely common Use double-equals == to test for equality Use != to indicate not-equal-to R heavily utilizes vectorized functions For example, if x=c(4,9,16) then sqrt(x) returns (2,3,4) Matrices Matrices are vectors with a dimension attribute Matrix math, ie Linear Algebra, is common in statistical applications Standard operators (+, -, *, /) are element-wise Matrix multiplcation uses the %*% operator Transpose via t() Invert via solve() or a Choleski decomposition Subset a matrix with square brackets [] Uses form [row index, column index] Blank index indicates \u0026ldquo;all\u0026rdquo; You can \u0026ldquo;sweep\u0026rdquo; a function over the rows or columns Simple functions are built-in, such as RowSums() and ColMeans() Alternatively, use apply() Lists Lists are generalized vectors Each element of a vector holds a value, each element of a list \u0026ldquo;holds\u0026rdquo; an R object You can nest lists; ie a list element could be another list Most algorithmic functions in R return lists, eg, lm(), kmeans(), prcomp() List subsetting / extracting elements Single brackets [] return a list object Double brackets [[]] or dollar sign $ extract a list element It is common to apply a function to each object in a list lapply() returns a list of results, sapply() returns a (simplified) vector Data.frames Data.frames are an extremely useful object for analysis You can think of them as an Excel table However, they are list objects in R with certain constraints and special properties Each element of the list (ie column of a data.frame) is a vector of the same length These vectors (ie data.frame columns) can store values of different types To subset a data.frame, use the list and vector subsetting operations already discussed To add a new column, syntax is the same as adding a new list element Sorting is simply subsetting the dataframe with all rows (in a different order) returned Common analytic operations Use aggregate() to perform a common split-apply-combine summary analysis Use merge() to combine multiple data.frames based on the values of select key columns Categorical variables are called \u0026ldquo;factors\u0026rdquo; in R Offer efficient storage when the number of levels (values of the categorical variable) is much fewer than the number of rows of the data.frame Many algorithms handle them appropriately, eg, gender in the linear regression lm(height ~ weight + gender) Data Input/Output R is generally fantastic at getting data in and out of R, but we\u0026rsquo;ll focus only on 2 common approaches: read.csv() brings data in, stored as a data.frame object write.csv() does exactly what you think save() write one or more objects to disk in an efficient R-specific storage format load() reads in saved objects "
},
{
	"uri": "http://localhost:1313/2-r-for-data-analysis/",
	"title": "R for Data Analysis",
	"tags": [],
	"description": "",
	"content": "Submit Attendance: link\nFiles for today: data.table | tidyverse | functions\nData.table subset rows create cols with := operator aggregate \u0026ndash; args take lists aggregate and merge is just one step merge .N (ie, dot-N) set functions S.ubset of D.atatable (SD and .SDcols) Tidyverse tibbles special print properties the \u0026ldquo;pipe\u0026rdquo; (cmd + shift + m) R now has a \u0026ldquo;native\u0026rdquo; pipe |\u0026gt; the 5 verbs and group_by filter() selects rows arrange() orders by row select() chooses columns mutate() creates new columns summarize() with group_by() does aggregations reshaping data from wide to long Functions and Control Flow args, formals, local scope defensive programming local v global assignment or you can use an anonymous function if, else, and ifelse with assignment loops "
},
{
	"uri": "http://localhost:1313/3-viz-quarto/",
	"title": "Visualization &amp; Reporting",
	"tags": [],
	"description": "",
	"content": "Submit Attendance: link\nFiles for today: base plots | ggplot2 | quarto\nBase Plots add ggplot2 add Quarto yaml markdown text formatting including code and output controlling code chunk behavior rendering with pandoc "
},
{
	"uri": "http://localhost:1313/9-resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "lorum ipsom\n"
},
{
	"uri": "http://localhost:1313/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "MFE 2024 R Workshop Hi MFEs!\nWelcome to the R Programming Workshop. This is a three-session intensive workshop to get you comfortable using R.\n"
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]